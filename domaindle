#!/usr/bin/env bash

set -eo pipefail
declare domains_file=domains.csv
declare guess_limit=6
declare reveal_delay=0.3
declare green=22 yellow=33 white=70
declare alphabet=ABCDEFGHIJKLMNOPQRSTUVWXYZ
declare remark=(Genius Magnificent Splendid Great Phew)

trap exit INT

banner() {

  cat << EOF
 ____                        _           _ _
|  _ \  ___  _ __ ___   __ _(_)_ __   __| | | ___
| | | |/ _ \| '_  '_ \ / _' | | '_ \ / _' | |/ _ \\
| |_| | (_) | | | | | | (_| | | | | | (_| | |  __/
|____/ \___/|_| |_| |_|\__,_|_|_| |_|\__,_|_|\___|
Domaindle - Guess 5 letter domains from the Data Dictionary!

EOF

}

explain() {

  local domain=$1
  local longform=$2
  local description=$3
  echo "Domain '$domain' is short for '$longform' and represents '$description'."

}

main() {

  local domain_data selected_idx selected non_green colour longform description
  local guess_number=0 guess="     "

  # Read domain data from CSV file, each entry is domain,long form,description
  mapfile -t domain_data < $domains_file

  # Select a random index into the domain data and use that to select a domain
  selected_idx=$((RANDOM % ${#domain_data[@]}))
  domain_detail=${domain_data[$selected_idx]}
  IFS=, read -r selected longform description <<< "$domain_detail"
  selected="${selected^^}"

  # Show banner
  banner

  # Show clue if requested
  if [[ $1 == '-c' || $1 == '--clue' ]]; then
    echo -e "Clue: a domain that represents the concept of '$description'\n"
  fi

  until [[ guess_number -ge guess_limit ]]; do
    non_green=""
    # Determine all the non-green letters
    for ((i = 0; i < ${#selected}; i++)); do
      if [[ "${selected:$i:1}" != "${guess:$i:1}" ]]; then
        non_green+="${selected:$i:1}"
      fi
    done

    # Go through each letter, and highlight depending on letter result
    for ((i = 0; i < ${#selected}; i++)); do

      letter=${guess:$i:1}

      # Letter matches in right place -> green
      if [[ "${selected:$i:1}" == "$letter" ]]; then
        colour=$green
      else

        # Letter matches but not in right place -> yellow
        # Also, remove that letter so we don't count it twice
        if [[ "$non_green" == *"$letter"* ]]; then
          colour=$yellow
          non_green=${non_green/"$letter"/}

        # Otherwise not a match at all -> white
        else
          colour=$white
        fi
      fi

      # Display letter, colour-coded
      echo -en "\033[30;10${colour:0:1}m $letter \033[0m"

      [[ $guess_number -gt 0 ]] && sleep $reveal_delay

      # Mark the letter in the alphabet appropriately
      alphabet="${alphabet/${letter}/\\033[30;10${colour:1:1}m${letter}\\033[0m}"

    done

    # Show letters used
    echo -en " [${alphabet}] "

    # Receive guess, uppercase and pad to 5 chars
    guess_number=$((guess_number + 1))
    read -rp "Guess $guess_number/$guess_limit: " guess
    guess="${guess^^}     "
    guess="${guess:0:5}"

    # If guess is correct, celebrate
    if [[ $guess == "$selected" ]]; then

      echo -n "${remark[$guess_number - 1]}! "
      explain "$selected" "$longform" "$description"
      exit 0

    fi

  done

  echo "Sorry, you didn't manage to guess, the domain was '$selected'."
  explain "$selected" "$longform" "$description"
  exit 1

}

main "$@"

